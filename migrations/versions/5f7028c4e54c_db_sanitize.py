"""DB Sanitize

Revision ID: 5f7028c4e54c
Revises: 836be1af53a7
Create Date: 2021-04-22 19:18:20.256030

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision = "5f7028c4e54c"
down_revision = "836be1af53a7"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("image", schema=None) as batch_op:
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "image_name",
            existing_type=sa.VARCHAR(length=140),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "image_path",
            existing_type=sa.VARCHAR(length=4096),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "patient_id",
            existing_type=sa.VARCHAR(length=100),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.drop_index("idx_image_expert_id")
        batch_op.drop_index("idx_image_ix_image_diagnostic")
        batch_op.drop_index("idx_image_ix_image_image_name")
        batch_op.create_index(
            batch_op.f("ix_image_diagnostic"), ["diagnostic"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_image_patient_id"), ["patient_id"], unique=False
        )
        batch_op.create_unique_constraint(
            batch_op.f("uq_image_image_path"), ["image_path"]
        )

    with op.batch_alter_table("pdf", schema=None) as batch_op:
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "lang",
            existing_type=sa.VARCHAR(length=140),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "patient_id",
            existing_type=sa.VARCHAR(length=100),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "pdf_name",
            existing_type=sa.VARCHAR(length=140),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "pdf_path",
            existing_type=sa.VARCHAR(length=4096),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.drop_index("idx_pdf_expert_id")
        batch_op.drop_index("idx_pdf_ix_pdf_lang")
        batch_op.drop_index("idx_pdf_ix_pdf_pdf_name")
        batch_op.create_index(
            batch_op.f("ix_pdf_patient_id"), ["patient_id"], unique=False
        )
        batch_op.create_index(batch_op.f("ix_pdf_pdf_name"), ["pdf_name"], unique=False)
        batch_op.create_unique_constraint(batch_op.f("uq_pdf_pdf_path"), ["pdf_path"])

    with op.batch_alter_table("report_histo", schema=None) as batch_op:
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "ontology_tree",
            existing_type=sqlite.JSON(),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.drop_index("idx_report_histo_expert_id")
        batch_op.drop_index("idx_report_histo_ix_report_histo_biopsie_id")
        batch_op.drop_index("idx_report_histo_ix_report_histo_conclusion")
        batch_op.drop_index("idx_report_histo_ix_report_histo_patient_id")
        batch_op.create_index(
            batch_op.f("ix_report_histo_conclusion"), ["conclusion"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_report_histo_gene_diag"), ["gene_diag"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_report_histo_patient_id"), ["patient_id"], unique=False
        )

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.alter_column(
            "email",
            existing_type=sa.VARCHAR(length=120),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "password_hash",
            existing_type=sa.VARCHAR(length=128),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "username",
            existing_type=sa.VARCHAR(length=64),
            nullable=False,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.create_index(batch_op.f("ix_user_email"), ["email"], unique=True)
        batch_op.create_index(batch_op.f("ix_user_username"), ["username"], unique=True)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_user_username"))
        batch_op.drop_index(batch_op.f("ix_user_email"))
        batch_op.alter_column(
            "username",
            existing_type=sa.VARCHAR(length=64),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "password_hash",
            existing_type=sa.VARCHAR(length=128),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "email",
            existing_type=sa.VARCHAR(length=120),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )

    with op.batch_alter_table("report_histo", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_report_histo_patient_id"))
        batch_op.drop_index(batch_op.f("ix_report_histo_gene_diag"))
        batch_op.drop_index(batch_op.f("ix_report_histo_conclusion"))
        batch_op.create_index(
            "idx_report_histo_ix_report_histo_patient_id", ["patient_id"], unique=False
        )
        batch_op.create_index(
            "idx_report_histo_ix_report_histo_conclusion", ["conclusion"], unique=False
        )
        batch_op.create_index(
            "idx_report_histo_ix_report_histo_biopsie_id", ["biopsie_id"], unique=False
        )
        batch_op.create_index("idx_report_histo_expert_id", ["expert_id"], unique=False)
        batch_op.alter_column(
            "ontology_tree",
            existing_type=sqlite.JSON(),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )

    with op.batch_alter_table("pdf", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("uq_pdf_pdf_path"), type_="unique")
        batch_op.drop_index(batch_op.f("ix_pdf_pdf_name"))
        batch_op.drop_index(batch_op.f("ix_pdf_patient_id"))
        batch_op.create_index("idx_pdf_ix_pdf_pdf_name", ["pdf_name"], unique=False)
        batch_op.create_index("idx_pdf_ix_pdf_lang", ["lang"], unique=False)
        batch_op.create_index("idx_pdf_expert_id", ["expert_id"], unique=False)
        batch_op.alter_column(
            "pdf_path",
            existing_type=sa.VARCHAR(length=4096),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "pdf_name",
            existing_type=sa.VARCHAR(length=140),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "patient_id",
            existing_type=sa.VARCHAR(length=100),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "lang",
            existing_type=sa.VARCHAR(length=140),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )

    with op.batch_alter_table("image", schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f("uq_image_image_path"), type_="unique")
        batch_op.drop_index(batch_op.f("ix_image_patient_id"))
        batch_op.drop_index(batch_op.f("ix_image_diagnostic"))
        batch_op.create_index(
            "idx_image_ix_image_image_name", ["image_name"], unique=False
        )
        batch_op.create_index(
            "idx_image_ix_image_diagnostic", ["diagnostic"], unique=False
        )
        batch_op.create_index("idx_image_expert_id", ["expert_id"], unique=False)
        batch_op.alter_column(
            "patient_id",
            existing_type=sa.VARCHAR(length=100),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "image_path",
            existing_type=sa.VARCHAR(length=4096),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "image_name",
            existing_type=sa.VARCHAR(length=140),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )
        batch_op.alter_column(
            "expert_id",
            existing_type=sa.INTEGER(),
            nullable=True,
            existing_server_default=sa.text("(NULL)"),
        )

    # ### end Alembic commands ###
